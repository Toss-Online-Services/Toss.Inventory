@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authentication.OpenIdConnect;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Authentication
@using Toss.WebApp.Services
@implements IDisposable
@inject LogOutService LogOutService
@inject NavigationManager NavigationManager
<AuthorizeView>
    <Authorized>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/Store">
                <i class="material-symbols-rounded opacity-6 me-2 text-md">dashboard</i> Store
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Account/Manage">
                <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <form action="Account/Logout" method="post">
                <AntiforgeryToken />
                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                <button type="submit" class="nav-link">
                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                </button>
            </form>
        </div>
    </Authorized>
    <NotAuthorized>
        <ul class="navbar-nav navbar-nav-hover mx-auto">
            <li class="nav-item dropdown dropdown-hover mx-1">
                <a href="Account/Register" class="font-weight-semibold nav-link ps-2 d-flex cursor-pointer align-items-center d-lg-block d-none">
                    <i class="material-symbols-rounded opacity-6 me-2 text-md">contacts</i>
                    Register
                </a>
            </li>
            <li class="nav-item">
                <a href="Account/Login" class="btn  btn-dark  mb-0 d-lg-block d-none" onclick="smoothToPricing('log-in')">Sign In</a>
            </li>
        </ul>
        @* <a aria-label="Sign in" href="@Pages.User.LogIn.Url(Nav)"><img role="presentation" src="icons/user.svg" /></a> *@
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }


    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private Task LogOutAsync()
        => LogOutService.LogOutAsync(HttpContext!);
}
