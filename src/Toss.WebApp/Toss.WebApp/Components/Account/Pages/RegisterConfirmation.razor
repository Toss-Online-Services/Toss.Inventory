@page "/Account/RegisterConfirmation"
@layout PublicLayout
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Toss.WebApp.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<section class="pt-0 pt-md-5 pb-md-5 pt-lg-5 mt-5 mt-md-7 mt-lg-0">
    <div class="container">
        <div class="col-12 mx-auto pb-5">
            <div class="card shadow-lg">
                <div class="card-header p-0 position-relative mt-2 mx-2 z-index-2 bg-transparent">
                    <div class="bg-gradient-dark shadow-dark border-radius-lg p-4">
                        <h3 class="h4 text-white mb-0">Register confirmation</h3>
                        <p class="text-white opacity-8 mb-0">Last modified: Sept 01 2021</p>
                    </div>
                </div>
                <div class="card-body pt-lg-2 mt-2">
                    <StatusMessage Message="@statusMessage" />

                    @if (emailConfirmationLink is not null)
                    {
                        <p>
                            <a href="@emailConfirmationLink">Click here</a> to confirm your account
                        </p>
                    }
                    else
                    {
                        <p role="alert">Please check your email to confirm your account.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</section>




@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}
